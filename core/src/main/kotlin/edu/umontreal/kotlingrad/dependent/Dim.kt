@file:Suppress("ClassName")

package edu.umontreal.kotlingrad.dependent

open class D0(override val i: Int = 0): D1(i) { companion object: D0(), Nat<D0> }
open class D1(override val i: Int = 1): D2(i) { companion object: D1(), Nat<D1> }
open class D2(override val i: Int = 2): D3(i) { companion object: D2(), Nat<D2> }
open class D3(override val i: Int = 3): D4(i) { companion object: D3(), Nat<D3> }
open class D4(override val i: Int = 4): D5(i) { companion object: D4(), Nat<D4> }
open class D5(override val i: Int = 5): D6(i) { companion object: D5(), Nat<D5> }
open class D6(override val i: Int = 6): D7(i) { companion object: D6(), Nat<D6> }
open class D7(override val i: Int = 7): D8(i) { companion object: D7(), Nat<D7> }
open class D8(override val i: Int = 8): D9(i) { companion object: D8(), Nat<D8> }
open class D9(override val i: Int = 9): D10(i) { companion object: D9(), Nat<D9> }
open class D10(override val i: Int = 10): D11(i) { companion object: D10(), Nat<D10> }
open class D11(override val i: Int = 11): D12(i) { companion object: D11(), Nat<D11> }
open class D12(override val i: Int = 12): D13(i) { companion object: D12(), Nat<D12> }
open class D13(override val i: Int = 13): D14(i) { companion object: D13(), Nat<D13> }
open class D14(override val i: Int = 14): D15(i) { companion object: D14(), Nat<D14> }
open class D15(override val i: Int = 15): D16(i) { companion object: D15(), Nat<D15> }
open class D16(override val i: Int = 16): D17(i) { companion object: D16(), Nat<D16> }
open class D17(override val i: Int = 17): D18(i) { companion object: D17(), Nat<D17> }
open class D18(override val i: Int = 18): D19(i) { companion object: D18(), Nat<D18> }
open class D19(override val i: Int = 19): D20(i) { companion object: D19(), Nat<D19> }
open class D20(override val i: Int = 20): D21(i) { companion object: D20(), Nat<D20> }
open class D21(override val i: Int = 21): D22(i) { companion object: D21(), Nat<D21> }
open class D22(override val i: Int = 22): D23(i) { companion object: D22(), Nat<D22> }
open class D23(override val i: Int = 23): D24(i) { companion object: D23(), Nat<D23> }
open class D24(override val i: Int = 24): D25(i) { companion object: D24(), Nat<D24> }
open class D25(override val i: Int = 25): D26(i) { companion object: D25(), Nat<D25> }
open class D26(override val i: Int = 26): D27(i) { companion object: D26(), Nat<D26> }
open class D27(override val i: Int = 27): D28(i) { companion object: D27(), Nat<D27> }
open class D28(override val i: Int = 28): D29(i) { companion object: D28(), Nat<D28> }
open class D29(override val i: Int = 29): D30(i) { companion object: D29(), Nat<D29> }
open class D30(override val i: Int = 30): D31(i) { companion object: D30(), Nat<D30> }
open class D31(override val i: Int = 31): D32(i) { companion object: D31(), Nat<D31> }
open class D32(override val i: Int = 32): D33(i) { companion object: D32(), Nat<D32> }
open class D33(override val i: Int = 33): D34(i) { companion object: D33(), Nat<D33> }
open class D34(override val i: Int = 34): D35(i) { companion object: D34(), Nat<D34> }
open class D35(override val i: Int = 35): D36(i) { companion object: D35(), Nat<D35> }
open class D36(override val i: Int = 36): D37(i) { companion object: D36(), Nat<D36> }
open class D37(override val i: Int = 37): D38(i) { companion object: D37(), Nat<D37> }
open class D38(override val i: Int = 38): D39(i) { companion object: D38(), Nat<D38> }
open class D39(override val i: Int = 39): D40(i) { companion object: D39(), Nat<D39> }
open class D40(override val i: Int = 40): D41(i) { companion object: D40(), Nat<D40> }
open class D41(override val i: Int = 41): D42(i) { companion object: D41(), Nat<D41> }
open class D42(override val i: Int = 42): D43(i) { companion object: D42(), Nat<D42> }
open class D43(override val i: Int = 43): D44(i) { companion object: D43(), Nat<D43> }
open class D44(override val i: Int = 44): D45(i) { companion object: D44(), Nat<D44> }
open class D45(override val i: Int = 45): D46(i) { companion object: D45(), Nat<D45> }
open class D46(override val i: Int = 46): D47(i) { companion object: D46(), Nat<D46> }
open class D47(override val i: Int = 47): D48(i) { companion object: D47(), Nat<D47> }
open class D48(override val i: Int = 48): D49(i) { companion object: D48(), Nat<D48> }
open class D49(override val i: Int = 49): D50(i) { companion object: D49(), Nat<D49> }
open class D50(override val i: Int = 50): D51(i) { companion object: D50(), Nat<D50> }
open class D51(override val i: Int = 51): D52(i) { companion object: D51(), Nat<D51> }
open class D52(override val i: Int = 52): D53(i) { companion object: D52(), Nat<D52> }
open class D53(override val i: Int = 53): D54(i) { companion object: D53(), Nat<D53> }
open class D54(override val i: Int = 54): D55(i) { companion object: D54(), Nat<D54> }
open class D55(override val i: Int = 55): D56(i) { companion object: D55(), Nat<D55> }
open class D56(override val i: Int = 56): D57(i) { companion object: D56(), Nat<D56> }
open class D57(override val i: Int = 57): D58(i) { companion object: D57(), Nat<D57> }
open class D58(override val i: Int = 58): D59(i) { companion object: D58(), Nat<D58> }
open class D59(override val i: Int = 59): D60(i) { companion object: D59(), Nat<D59> }
open class D60(override val i: Int = 60): D61(i) { companion object: D60(), Nat<D60> }
open class D61(override val i: Int = 61): D62(i) { companion object: D61(), Nat<D61> }
open class D62(override val i: Int = 62): D63(i) { companion object: D62(), Nat<D62> }
open class D63(override val i: Int = 63): D64(i) { companion object: D63(), Nat<D63> }
open class D64(override val i: Int = 64): D65(i) { companion object: D64(), Nat<D64> }
open class D65(override val i: Int = 65): D66(i) { companion object: D65(), Nat<D65> }
open class D66(override val i: Int = 66): D67(i) { companion object: D66(), Nat<D66> }
open class D67(override val i: Int = 67): D68(i) { companion object: D67(), Nat<D67> }
open class D68(override val i: Int = 68): D69(i) { companion object: D68(), Nat<D68> }
open class D69(override val i: Int = 69): D70(i) { companion object: D69(), Nat<D69> }
open class D70(override val i: Int = 70): D71(i) { companion object: D70(), Nat<D70> }
open class D71(override val i: Int = 71): D72(i) { companion object: D71(), Nat<D71> }
open class D72(override val i: Int = 72): D73(i) { companion object: D72(), Nat<D72> }
open class D73(override val i: Int = 73): D74(i) { companion object: D73(), Nat<D73> }
open class D74(override val i: Int = 74): D75(i) { companion object: D74(), Nat<D74> }
open class D75(override val i: Int = 75): D76(i) { companion object: D75(), Nat<D75> }
open class D76(override val i: Int = 76): D77(i) { companion object: D76(), Nat<D76> }
open class D77(override val i: Int = 77): D78(i) { companion object: D77(), Nat<D77> }
open class D78(override val i: Int = 78): D79(i) { companion object: D78(), Nat<D78> }
open class D79(override val i: Int = 79): D80(i) { companion object: D79(), Nat<D79> }
open class D80(override val i: Int = 80): D81(i) { companion object: D80(), Nat<D80> }
open class D81(override val i: Int = 81): D82(i) { companion object: D81(), Nat<D81> }
open class D82(override val i: Int = 82): D83(i) { companion object: D82(), Nat<D82> }
open class D83(override val i: Int = 83): D84(i) { companion object: D83(), Nat<D83> }
open class D84(override val i: Int = 84): D85(i) { companion object: D84(), Nat<D84> }
open class D85(override val i: Int = 85): D86(i) { companion object: D85(), Nat<D85> }
open class D86(override val i: Int = 86): D87(i) { companion object: D86(), Nat<D86> }
open class D87(override val i: Int = 87): D88(i) { companion object: D87(), Nat<D87> }
open class D88(override val i: Int = 88): D89(i) { companion object: D88(), Nat<D88> }
open class D89(override val i: Int = 89): D90(i) { companion object: D89(), Nat<D89> }
open class D90(override val i: Int = 90): D91(i) { companion object: D90(), Nat<D90> }
open class D91(override val i: Int = 91): D92(i) { companion object: D91(), Nat<D91> }
open class D92(override val i: Int = 92): D93(i) { companion object: D92(), Nat<D92> }
open class D93(override val i: Int = 93): D94(i) { companion object: D93(), Nat<D93> }
open class D94(override val i: Int = 94): D95(i) { companion object: D94(), Nat<D94> }
open class D95(override val i: Int = 95): D96(i) { companion object: D95(), Nat<D95> }
open class D96(override val i: Int = 96): D97(i) { companion object: D96(), Nat<D96> }
open class D97(override val i: Int = 97): D98(i) { companion object: D97(), Nat<D97> }
open class D98(override val i: Int = 98): D99(i) { companion object: D98(), Nat<D98> }
open class D99(override val i: Int = 99): D100(i) { companion object: D99(), Nat<D99> }

sealed class D100(open val i: Int = 100) {
  companion object: D100(), Nat<D100>
  override fun toString() = "$i"
}

interface Nat<T: D100> { val i: Int }